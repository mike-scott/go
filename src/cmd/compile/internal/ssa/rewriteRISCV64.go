// autogenerated from gen/RISCV64.rules: do not edit!
// generated with: cd gen; go run *.go

package ssa

import "math"

var _ = math.MinInt8 // in case not otherwise used
func rewriteValueRISCV64(v *Value) bool {
	switch v.Op {
	case OpAdd16:
		return rewriteValueRISCV64_OpAdd16(v)
	case OpAdd32:
		return rewriteValueRISCV64_OpAdd32(v)
	case OpAdd32F:
		return rewriteValueRISCV64_OpAdd32F(v)
	case OpAdd64:
		return rewriteValueRISCV64_OpAdd64(v)
	case OpAdd64F:
		return rewriteValueRISCV64_OpAdd64F(v)
	case OpAdd8:
		return rewriteValueRISCV64_OpAdd8(v)
	case OpAddPtr:
		return rewriteValueRISCV64_OpAddPtr(v)
	case OpAddr:
		return rewriteValueRISCV64_OpAddr(v)
	case OpAnd16:
		return rewriteValueRISCV64_OpAnd16(v)
	case OpAnd32:
		return rewriteValueRISCV64_OpAnd32(v)
	case OpAnd64:
		return rewriteValueRISCV64_OpAnd64(v)
	case OpAnd8:
		return rewriteValueRISCV64_OpAnd8(v)
	case OpAvg64u:
		return rewriteValueRISCV64_OpAvg64u(v)
	case OpCom16:
		return rewriteValueRISCV64_OpCom16(v)
	case OpCom32:
		return rewriteValueRISCV64_OpCom32(v)
	case OpCom64:
		return rewriteValueRISCV64_OpCom64(v)
	case OpCom8:
		return rewriteValueRISCV64_OpCom8(v)
	case OpCvt32Fto32:
		return rewriteValueRISCV64_OpCvt32Fto32(v)
	case OpCvt32Fto64:
		return rewriteValueRISCV64_OpCvt32Fto64(v)
	case OpCvt32Fto64F:
		return rewriteValueRISCV64_OpCvt32Fto64F(v)
	case OpCvt32to32F:
		return rewriteValueRISCV64_OpCvt32to32F(v)
	case OpCvt32to64F:
		return rewriteValueRISCV64_OpCvt32to64F(v)
	case OpCvt64Fto32:
		return rewriteValueRISCV64_OpCvt64Fto32(v)
	case OpCvt64Fto32F:
		return rewriteValueRISCV64_OpCvt64Fto32F(v)
	case OpCvt64Fto64:
		return rewriteValueRISCV64_OpCvt64Fto64(v)
	case OpCvt64to32F:
		return rewriteValueRISCV64_OpCvt64to32F(v)
	case OpCvt64to64F:
		return rewriteValueRISCV64_OpCvt64to64F(v)
	case OpDiv16:
		return rewriteValueRISCV64_OpDiv16(v)
	case OpDiv16u:
		return rewriteValueRISCV64_OpDiv16u(v)
	case OpDiv32:
		return rewriteValueRISCV64_OpDiv32(v)
	case OpDiv32F:
		return rewriteValueRISCV64_OpDiv32F(v)
	case OpDiv32u:
		return rewriteValueRISCV64_OpDiv32u(v)
	case OpDiv64:
		return rewriteValueRISCV64_OpDiv64(v)
	case OpDiv64F:
		return rewriteValueRISCV64_OpDiv64F(v)
	case OpDiv64u:
		return rewriteValueRISCV64_OpDiv64u(v)
	case OpDiv8:
		return rewriteValueRISCV64_OpDiv8(v)
	case OpDiv8u:
		return rewriteValueRISCV64_OpDiv8u(v)
	case OpEq16:
		return rewriteValueRISCV64_OpEq16(v)
	case OpEq32:
		return rewriteValueRISCV64_OpEq32(v)
	case OpEq32F:
		return rewriteValueRISCV64_OpEq32F(v)
	case OpEq64:
		return rewriteValueRISCV64_OpEq64(v)
	case OpEq64F:
		return rewriteValueRISCV64_OpEq64F(v)
	case OpEq8:
		return rewriteValueRISCV64_OpEq8(v)
	case OpEqPtr:
		return rewriteValueRISCV64_OpEqPtr(v)
	case OpGeq16:
		return rewriteValueRISCV64_OpGeq16(v)
	case OpGeq16U:
		return rewriteValueRISCV64_OpGeq16U(v)
	case OpGeq32:
		return rewriteValueRISCV64_OpGeq32(v)
	case OpGeq32F:
		return rewriteValueRISCV64_OpGeq32F(v)
	case OpGeq32U:
		return rewriteValueRISCV64_OpGeq32U(v)
	case OpGeq64:
		return rewriteValueRISCV64_OpGeq64(v)
	case OpGeq64F:
		return rewriteValueRISCV64_OpGeq64F(v)
	case OpGeq64U:
		return rewriteValueRISCV64_OpGeq64U(v)
	case OpGeq8:
		return rewriteValueRISCV64_OpGeq8(v)
	case OpGeq8U:
		return rewriteValueRISCV64_OpGeq8U(v)
	case OpGreater16:
		return rewriteValueRISCV64_OpGreater16(v)
	case OpGreater16U:
		return rewriteValueRISCV64_OpGreater16U(v)
	case OpGreater32:
		return rewriteValueRISCV64_OpGreater32(v)
	case OpGreater32F:
		return rewriteValueRISCV64_OpGreater32F(v)
	case OpGreater32U:
		return rewriteValueRISCV64_OpGreater32U(v)
	case OpGreater64:
		return rewriteValueRISCV64_OpGreater64(v)
	case OpGreater64F:
		return rewriteValueRISCV64_OpGreater64F(v)
	case OpGreater64U:
		return rewriteValueRISCV64_OpGreater64U(v)
	case OpGreater8:
		return rewriteValueRISCV64_OpGreater8(v)
	case OpGreater8U:
		return rewriteValueRISCV64_OpGreater8U(v)
	case OpHmul32:
		return rewriteValueRISCV64_OpHmul32(v)
	case OpHmul32u:
		return rewriteValueRISCV64_OpHmul32u(v)
	case OpHmul64:
		return rewriteValueRISCV64_OpHmul64(v)
	case OpHmul64u:
		return rewriteValueRISCV64_OpHmul64u(v)
	case OpLeq16:
		return rewriteValueRISCV64_OpLeq16(v)
	case OpLeq16U:
		return rewriteValueRISCV64_OpLeq16U(v)
	case OpLeq32:
		return rewriteValueRISCV64_OpLeq32(v)
	case OpLeq32F:
		return rewriteValueRISCV64_OpLeq32F(v)
	case OpLeq32U:
		return rewriteValueRISCV64_OpLeq32U(v)
	case OpLeq64:
		return rewriteValueRISCV64_OpLeq64(v)
	case OpLeq64F:
		return rewriteValueRISCV64_OpLeq64F(v)
	case OpLeq64U:
		return rewriteValueRISCV64_OpLeq64U(v)
	case OpLeq8:
		return rewriteValueRISCV64_OpLeq8(v)
	case OpLeq8U:
		return rewriteValueRISCV64_OpLeq8U(v)
	case OpLess16:
		return rewriteValueRISCV64_OpLess16(v)
	case OpLess16U:
		return rewriteValueRISCV64_OpLess16U(v)
	case OpLess32:
		return rewriteValueRISCV64_OpLess32(v)
	case OpLess32F:
		return rewriteValueRISCV64_OpLess32F(v)
	case OpLess32U:
		return rewriteValueRISCV64_OpLess32U(v)
	case OpLess64:
		return rewriteValueRISCV64_OpLess64(v)
	case OpLess64F:
		return rewriteValueRISCV64_OpLess64F(v)
	case OpLess64U:
		return rewriteValueRISCV64_OpLess64U(v)
	case OpLess8:
		return rewriteValueRISCV64_OpLess8(v)
	case OpLess8U:
		return rewriteValueRISCV64_OpLess8U(v)
	case OpLoad:
		return rewriteValueRISCV64_OpLoad(v)
	case OpLsh16x16:
		return rewriteValueRISCV64_OpLsh16x16(v)
	case OpLsh16x32:
		return rewriteValueRISCV64_OpLsh16x32(v)
	case OpLsh16x64:
		return rewriteValueRISCV64_OpLsh16x64(v)
	case OpLsh16x8:
		return rewriteValueRISCV64_OpLsh16x8(v)
	case OpLsh32x16:
		return rewriteValueRISCV64_OpLsh32x16(v)
	case OpLsh32x32:
		return rewriteValueRISCV64_OpLsh32x32(v)
	case OpLsh32x64:
		return rewriteValueRISCV64_OpLsh32x64(v)
	case OpLsh32x8:
		return rewriteValueRISCV64_OpLsh32x8(v)
	case OpLsh64x16:
		return rewriteValueRISCV64_OpLsh64x16(v)
	case OpLsh64x32:
		return rewriteValueRISCV64_OpLsh64x32(v)
	case OpLsh64x64:
		return rewriteValueRISCV64_OpLsh64x64(v)
	case OpLsh64x8:
		return rewriteValueRISCV64_OpLsh64x8(v)
	case OpLsh8x16:
		return rewriteValueRISCV64_OpLsh8x16(v)
	case OpLsh8x32:
		return rewriteValueRISCV64_OpLsh8x32(v)
	case OpLsh8x64:
		return rewriteValueRISCV64_OpLsh8x64(v)
	case OpLsh8x8:
		return rewriteValueRISCV64_OpLsh8x8(v)
	case OpMod16:
		return rewriteValueRISCV64_OpMod16(v)
	case OpMod16u:
		return rewriteValueRISCV64_OpMod16u(v)
	case OpMod32:
		return rewriteValueRISCV64_OpMod32(v)
	case OpMod32u:
		return rewriteValueRISCV64_OpMod32u(v)
	case OpMod64:
		return rewriteValueRISCV64_OpMod64(v)
	case OpMod64u:
		return rewriteValueRISCV64_OpMod64u(v)
	case OpMod8:
		return rewriteValueRISCV64_OpMod8(v)
	case OpMod8u:
		return rewriteValueRISCV64_OpMod8u(v)
	case OpMul16:
		return rewriteValueRISCV64_OpMul16(v)
	case OpMul32:
		return rewriteValueRISCV64_OpMul32(v)
	case OpMul32F:
		return rewriteValueRISCV64_OpMul32F(v)
	case OpMul64:
		return rewriteValueRISCV64_OpMul64(v)
	case OpMul64F:
		return rewriteValueRISCV64_OpMul64F(v)
	case OpMul8:
		return rewriteValueRISCV64_OpMul8(v)
	case OpNeg16:
		return rewriteValueRISCV64_OpNeg16(v)
	case OpNeg32:
		return rewriteValueRISCV64_OpNeg32(v)
	case OpNeg32F:
		return rewriteValueRISCV64_OpNeg32F(v)
	case OpNeg64:
		return rewriteValueRISCV64_OpNeg64(v)
	case OpNeg64F:
		return rewriteValueRISCV64_OpNeg64F(v)
	case OpNeg8:
		return rewriteValueRISCV64_OpNeg8(v)
	case OpNeq16:
		return rewriteValueRISCV64_OpNeq16(v)
	case OpNeq32:
		return rewriteValueRISCV64_OpNeq32(v)
	case OpNeq32F:
		return rewriteValueRISCV64_OpNeq32F(v)
	case OpNeq64:
		return rewriteValueRISCV64_OpNeq64(v)
	case OpNeq64F:
		return rewriteValueRISCV64_OpNeq64F(v)
	case OpNeq8:
		return rewriteValueRISCV64_OpNeq8(v)
	case OpNeqPtr:
		return rewriteValueRISCV64_OpNeqPtr(v)
	case OpNilCheck:
		return rewriteValueRISCV64_OpNilCheck(v)
	case OpOr16:
		return rewriteValueRISCV64_OpOr16(v)
	case OpOr32:
		return rewriteValueRISCV64_OpOr32(v)
	case OpOr64:
		return rewriteValueRISCV64_OpOr64(v)
	case OpOr8:
		return rewriteValueRISCV64_OpOr8(v)
	case OpRsh16Ux16:
		return rewriteValueRISCV64_OpRsh16Ux16(v)
	case OpRsh16Ux32:
		return rewriteValueRISCV64_OpRsh16Ux32(v)
	case OpRsh16Ux64:
		return rewriteValueRISCV64_OpRsh16Ux64(v)
	case OpRsh16Ux8:
		return rewriteValueRISCV64_OpRsh16Ux8(v)
	case OpRsh16x16:
		return rewriteValueRISCV64_OpRsh16x16(v)
	case OpRsh16x32:
		return rewriteValueRISCV64_OpRsh16x32(v)
	case OpRsh16x64:
		return rewriteValueRISCV64_OpRsh16x64(v)
	case OpRsh16x8:
		return rewriteValueRISCV64_OpRsh16x8(v)
	case OpRsh32Ux16:
		return rewriteValueRISCV64_OpRsh32Ux16(v)
	case OpRsh32Ux32:
		return rewriteValueRISCV64_OpRsh32Ux32(v)
	case OpRsh32Ux64:
		return rewriteValueRISCV64_OpRsh32Ux64(v)
	case OpRsh32Ux8:
		return rewriteValueRISCV64_OpRsh32Ux8(v)
	case OpRsh32x16:
		return rewriteValueRISCV64_OpRsh32x16(v)
	case OpRsh32x32:
		return rewriteValueRISCV64_OpRsh32x32(v)
	case OpRsh32x64:
		return rewriteValueRISCV64_OpRsh32x64(v)
	case OpRsh32x8:
		return rewriteValueRISCV64_OpRsh32x8(v)
	case OpRsh64Ux16:
		return rewriteValueRISCV64_OpRsh64Ux16(v)
	case OpRsh64Ux32:
		return rewriteValueRISCV64_OpRsh64Ux32(v)
	case OpRsh64Ux64:
		return rewriteValueRISCV64_OpRsh64Ux64(v)
	case OpRsh64Ux8:
		return rewriteValueRISCV64_OpRsh64Ux8(v)
	case OpRsh64x16:
		return rewriteValueRISCV64_OpRsh64x16(v)
	case OpRsh64x32:
		return rewriteValueRISCV64_OpRsh64x32(v)
	case OpRsh64x64:
		return rewriteValueRISCV64_OpRsh64x64(v)
	case OpRsh64x8:
		return rewriteValueRISCV64_OpRsh64x8(v)
	case OpRsh8Ux16:
		return rewriteValueRISCV64_OpRsh8Ux16(v)
	case OpRsh8Ux32:
		return rewriteValueRISCV64_OpRsh8Ux32(v)
	case OpRsh8Ux64:
		return rewriteValueRISCV64_OpRsh8Ux64(v)
	case OpRsh8Ux8:
		return rewriteValueRISCV64_OpRsh8Ux8(v)
	case OpRsh8x16:
		return rewriteValueRISCV64_OpRsh8x16(v)
	case OpRsh8x32:
		return rewriteValueRISCV64_OpRsh8x32(v)
	case OpRsh8x64:
		return rewriteValueRISCV64_OpRsh8x64(v)
	case OpRsh8x8:
		return rewriteValueRISCV64_OpRsh8x8(v)
	case OpSignExt16to32:
		return rewriteValueRISCV64_OpSignExt16to32(v)
	case OpSignExt16to64:
		return rewriteValueRISCV64_OpSignExt16to64(v)
	case OpSignExt32to64:
		return rewriteValueRISCV64_OpSignExt32to64(v)
	case OpSignExt8to16:
		return rewriteValueRISCV64_OpSignExt8to16(v)
	case OpSignExt8to32:
		return rewriteValueRISCV64_OpSignExt8to32(v)
	case OpSignExt8to64:
		return rewriteValueRISCV64_OpSignExt8to64(v)
	case OpSqrt:
		return rewriteValueRISCV64_OpSqrt(v)
	case OpStore:
		return rewriteValueRISCV64_OpStore(v)
	case OpSub16:
		return rewriteValueRISCV64_OpSub16(v)
	case OpSub32:
		return rewriteValueRISCV64_OpSub32(v)
	case OpSub32F:
		return rewriteValueRISCV64_OpSub32F(v)
	case OpSub64:
		return rewriteValueRISCV64_OpSub64(v)
	case OpSub64F:
		return rewriteValueRISCV64_OpSub64F(v)
	case OpSub8:
		return rewriteValueRISCV64_OpSub8(v)
	case OpSubPtr:
		return rewriteValueRISCV64_OpSubPtr(v)
	case OpTrunc16to8:
		return rewriteValueRISCV64_OpTrunc16to8(v)
	case OpTrunc32to16:
		return rewriteValueRISCV64_OpTrunc32to16(v)
	case OpTrunc32to8:
		return rewriteValueRISCV64_OpTrunc32to8(v)
	case OpTrunc64to16:
		return rewriteValueRISCV64_OpTrunc64to16(v)
	case OpTrunc64to32:
		return rewriteValueRISCV64_OpTrunc64to32(v)
	case OpTrunc64to8:
		return rewriteValueRISCV64_OpTrunc64to8(v)
	case OpXor16:
		return rewriteValueRISCV64_OpXor16(v)
	case OpXor32:
		return rewriteValueRISCV64_OpXor32(v)
	case OpXor64:
		return rewriteValueRISCV64_OpXor64(v)
	case OpXor8:
		return rewriteValueRISCV64_OpXor8(v)
	case OpZeroExt16to32:
		return rewriteValueRISCV64_OpZeroExt16to32(v)
	case OpZeroExt16to64:
		return rewriteValueRISCV64_OpZeroExt16to64(v)
	case OpZeroExt32to64:
		return rewriteValueRISCV64_OpZeroExt32to64(v)
	case OpZeroExt8to16:
		return rewriteValueRISCV64_OpZeroExt8to16(v)
	case OpZeroExt8to32:
		return rewriteValueRISCV64_OpZeroExt8to32(v)
	case OpZeroExt8to64:
		return rewriteValueRISCV64_OpZeroExt8to64(v)
	}
	return false
}
func rewriteValueRISCV64_OpAdd16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Add16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAdd32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Add32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAdd32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Add32F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAdd64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Add64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAdd64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Add64F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAdd8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Add8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAddPtr(v *Value) bool {
	b := v.Block
	_ = b
	// match: (AddPtr x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAddr(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Addr {sym} base)
	// cond:
	// result: (MOVmem {sym} base)
	for {
		sym := v.Aux
		base := v.Args[0]
		v.reset(OpRISCV64MOVmem)
		v.Aux = sym
		v.AddArg(base)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAnd16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (And16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAnd32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (And32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAnd64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (And64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAnd8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (And8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpAvg64u(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Avg64u x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCom16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Com16 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCom32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Com32 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCom64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Com64 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCom8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Com8 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCvt32Fto32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Cvt32Fto32 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCvt32Fto64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Cvt32Fto64 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCvt32Fto64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Cvt32Fto64F x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCvt32to32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Cvt32to32F x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCvt32to64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Cvt32to64F x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCvt64Fto32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Cvt64Fto32 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCvt64Fto32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Cvt64Fto32F x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCvt64Fto64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Cvt64Fto64 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCvt64to32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Cvt64to32F x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpCvt64to64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Cvt64to64F x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpDiv16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Div16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpDiv16u(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Div16u x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpDiv32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Div32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpDiv32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Div32F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpDiv32u(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Div32u x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpDiv64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Div64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpDiv64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Div64F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpDiv64u(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Div64u x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpDiv8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Div8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpDiv8u(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Div8u x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpEq16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Eq16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpEq32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Eq32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpEq32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Eq32F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpEq64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Eq64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpEq64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Eq64F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpEq8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Eq8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpEqPtr(v *Value) bool {
	b := v.Block
	_ = b
	// match: (EqPtr x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGeq16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Geq16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGeq16U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Geq16U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGeq32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Geq32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGeq32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Geq32F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGeq32U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Geq32U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGeq64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Geq64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGeq64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Geq64F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGeq64U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Geq64U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGeq8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Geq8  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGeq8U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Geq8U  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGreater16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Greater16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGreater16U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Greater16U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGreater32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Greater32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGreater32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Greater32F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGreater32U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Greater32U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGreater64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Greater64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGreater64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Greater64F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGreater64U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Greater64U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGreater8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Greater8  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpGreater8U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Greater8U  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpHmul32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Hmul32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpHmul32u(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Hmul32u x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpHmul64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Hmul64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpHmul64u(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Hmul64u x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLeq16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Leq16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLeq16U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Leq16U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLeq32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Leq32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLeq32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Leq32F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLeq32U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Leq32U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLeq64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Leq64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLeq64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Leq64F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLeq64U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Leq64U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLeq8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Leq8  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLeq8U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Leq8U  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLess16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Less16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLess16U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Less16U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLess32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Less32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLess32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Less32F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLess32U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Less32U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLess64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Less64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLess64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Less64F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLess64U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Less64U x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLess8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Less8  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLess8U(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Less8U  x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLoad(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Load ptr mem)
	// cond:
	// result: (LD ptr mem)
	for {
		ptr := v.Args[0]
		mem := v.Args[1]
		v.reset(OpRISCV64LD)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh16x16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh16x32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh16x64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh16x8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh16x8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh32x16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh32x32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh32x64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh32x8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh32x8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh64x16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh64x32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh64x64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh64x8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh64x8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh8x16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh8x32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh8x64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpLsh8x8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Lsh8x8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMod16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mod16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMod16u(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mod16u x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMod32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mod32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMod32u(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mod32u x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMod64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mod64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMod64u(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mod64u x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMod8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mod8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMod8u(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mod8u x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMul16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mul16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMul32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mul32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMul32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mul32F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMul64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mul64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMul64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mul64F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpMul8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Mul8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeg16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neg16 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeg32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neg32 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeg32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neg32F x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeg64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neg64 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeg64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neg64F x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeg8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neg8 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeq16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neq16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeq32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neq32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeq32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neq32F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeq64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neq64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeq64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neq64F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeq8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Neq8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNeqPtr(v *Value) bool {
	b := v.Block
	_ = b
	// match: (NeqPtr x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpNilCheck(v *Value) bool {
	b := v.Block
	_ = b
	// match: (NilCheck ptr mem)
	// cond:
	// result: (LoweredNilCheck ptr mem)
	for {
		ptr := v.Args[0]
		mem := v.Args[1]
		v.reset(OpRISCV64LoweredNilCheck)
		v.AddArg(ptr)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpOr16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Or16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpOr32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Or32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpOr64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Or64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpOr8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Or8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh16Ux16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh16Ux32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh16Ux64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh16Ux8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh16Ux8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh16x16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh16x32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh16x64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh16x8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh16x8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh32Ux16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh32Ux32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh32Ux64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh32Ux8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh32Ux8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh32x16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh32x32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh32x64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh32x8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh32x8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh64Ux16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh64Ux32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh64Ux64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh64Ux8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh64Ux8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh64x16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh64x32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh64x64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh64x8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh64x8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh8Ux16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh8Ux32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh8Ux64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh8Ux8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh8Ux8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh8x16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh8x32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh8x64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpRsh8x8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Rsh8x8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSignExt16to32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (SignExt16to32 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSignExt16to64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (SignExt16to64 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSignExt32to64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (SignExt32to64 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSignExt8to16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (SignExt8to16 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSignExt8to32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (SignExt8to32 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSignExt8to64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (SignExt8to64 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSqrt(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Sqrt x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpStore(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Store ptr val mem)
	// cond:
	// result: (SD ptr val mem)
	for {
		ptr := v.Args[0]
		val := v.Args[1]
		mem := v.Args[2]
		v.reset(OpRISCV64SD)
		v.AddArg(ptr)
		v.AddArg(val)
		v.AddArg(mem)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSub16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Sub16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSub32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Sub32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSub32F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Sub32F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSub64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Sub64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSub64F(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Sub64F x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSub8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Sub8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpSubPtr(v *Value) bool {
	b := v.Block
	_ = b
	// match: (SubPtr x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpTrunc16to8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Trunc16to8 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpTrunc32to16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Trunc32to16 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpTrunc32to8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Trunc32to8 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpTrunc64to16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Trunc64to16 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpTrunc64to32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Trunc64to32 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpTrunc64to8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Trunc64to8 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpXor16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Xor16 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpXor32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Xor32 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpXor64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Xor64 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpXor8(v *Value) bool {
	b := v.Block
	_ = b
	// match: (Xor8 x y)
	// cond:
	// result: (ADD x y)
	for {
		x := v.Args[0]
		y := v.Args[1]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(y)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpZeroExt16to32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt16to32 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpZeroExt16to64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt16to64 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpZeroExt32to64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt32to64 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpZeroExt8to16(v *Value) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt8to16 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpZeroExt8to32(v *Value) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt8to32 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteValueRISCV64_OpZeroExt8to64(v *Value) bool {
	b := v.Block
	_ = b
	// match: (ZeroExt8to64 x)
	// cond:
	// result: (ADD x x)
	for {
		x := v.Args[0]
		v.reset(OpRISCV64ADD)
		v.AddArg(x)
		v.AddArg(x)
		return true
	}
	return false
}
func rewriteBlockRISCV64(b *Block) bool {
	switch b.Kind {
	}
	return false
}
